// Code generated by hertz generator.

package interact

import (
	"context"

	"work/biz/model/base"
	interact "work/biz/model/base/interact"
	"work/biz/service"
	"work/pkg/errmsg"
	"work/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// LikeAction .
// @router /like/action/ [POST]
func LikeAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.LikeActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewInteractService(ctx, c).NewLikeActionEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, interact.LikeActionResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, interact.LikeActionResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
	})
}

// LikeList .
// @router /like/list/ [GET]
func LikeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.LikeListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewInteractService(ctx, c).NewLikeListEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, interact.CommentListResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, interact.LikeListResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: data,
	})
}

// CommentPublish .
// @router /comment/publish/ [POST]
func CommentPublish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.CommentPublishRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewInteractService(ctx, c).NewCommentPublishEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, interact.CommentPublishResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, interact.CommentPublishResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
	})
}

// CommentList .
// @router /comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewInteractService(ctx, c).NewCommentListEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, interact.CommentListResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, interact.CommentListResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: data,
	})
}

// CommentDelete .
// @router /comment/delete/ [DELETE]
func CommentDelete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interact.CommentDeleteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewInteractService(ctx, c).NewDeleteEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, interact.CommentDeleteResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, interact.CommentDeleteResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
	})
}
