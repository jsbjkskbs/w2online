// Code generated by hertz generator.

package user

import (
	"context"
	"fmt"

	"work/biz/model/base"
	user "work/biz/model/base/user"
	"work/biz/mw/jwt"
	"work/biz/service"
	"work/pkg/errmsg"
	"work/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserRegister .
// @router /user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, user.UserRegisterResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	_, err = service.NewUserService(ctx, c).UserServiceRegister(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, user.UserRegisterResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	jwt.AccessTokenJwtMiddleware.LoginHandler(ctx, c)
	jwt.RefreshTokenJwtMiddleware.LoginHandler(ctx, c)

	c.JSON(consts.StatusOK, user.UserRegisterResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		AccessToken:  c.GetString("Access-Token"),
		RefreshToken: c.GetString("Refresh-Token"),
	})
}

// UserLogin .
// @router /user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewUserService(ctx, c).UserServiceLogin(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, user.UserLoginResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	jwt.AccessTokenJwtMiddleware.LoginHandler(ctx, c)
	jwt.RefreshTokenJwtMiddleware.LoginHandler(ctx, c)

	c.JSON(consts.StatusOK, user.UserLoginResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: &base.User{
			Uid:       fmt.Sprintf("%v", data.Uid),
			Username:  data.Username,
			AvatarUrl: data.AvatarUrl,
			CreatedAt: utils.ConvertTimestampToStringDefault(data.CreatedAt),
			UpdatedAt: utils.ConvertTimestampToStringDefault(data.UpdatedAt),
			DeletedAt: utils.ConvertTimestampToStringDefault(data.DeletedAt),
		},
		AccessToken:  c.GetString("Access-Token"),
		RefreshToken: c.GetString("Refresh-Token"),
	})
}

// UserInfo .
// @router /user/info/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewUserService(ctx, c).UserServiceInfo(&req)

	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, &user.UserInfoResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, &user.UserInfoResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: &base.User{
			Uid:       fmt.Sprintf("%v", data.Uid),
			Username:  data.Username,
			AvatarUrl: data.AvatarUrl,
			CreatedAt: utils.ConvertTimestampToStringDefault(data.CreatedAt),
			UpdatedAt: utils.ConvertTimestampToStringDefault(data.UpdatedAt),
			DeletedAt: utils.ConvertTimestampToStringDefault(data.DeletedAt),
		},
	})
}

// UserAvatarUpload .
// @router /user/avatar/upload/ [PUT]
func UserAvatarUpload(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserAvatarUploadRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewUserService(ctx, c).UserServiceAvatarUpload(&req)

	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, &user.UserInfoResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, &user.UserInfoResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: &base.User{
			Uid:       fmt.Sprint(data.Uid),
			Username:  data.Username,
			AvatarUrl: data.AvatarUrl,
			CreatedAt: utils.ConvertTimestampToStringDefault(data.CreatedAt),
			UpdatedAt: utils.ConvertTimestampToStringDefault(data.UpdatedAt),
			DeletedAt: utils.ConvertTimestampToStringDefault(data.DeletedAt),
		},
	})
}

// AuthMfaQrcode .
// @router /auth/mfa/qrcode/ [GET]
func AuthMfaQrcode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.AuthMfaQrcodeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.AuthMfaQrcodeResponse)

	c.JSON(consts.StatusOK, resp)
}

// AuthMfaBind .
// @router /auth/mfa/bind/ [POST]
func AuthMfaBind(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.AuthMfaBindRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.AuthMfaBindResponse)

	c.JSON(consts.StatusOK, resp)
}
