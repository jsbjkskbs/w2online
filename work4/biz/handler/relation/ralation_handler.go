// Code generated by hertz generator.

package relation

import (
	"context"

	"work/biz/model/base"
	relation "work/biz/model/base/relation"
	"work/biz/service"
	"work/pkg/errmsg"
	"work/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewRelationService(ctx, c).NewRelationActionEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.RelationActionResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, relation.RelationActionResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
	})
}

// FollowingList .
// @router /following/list/ [GET]
func FollowingList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowingListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewRelationService(ctx, c).NewFollowingListEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.FollowingListResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, relation.FollowingListResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: data,
	})
}

// FollowerList .
// @router /follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewRelationService(ctx, c).NewFollowerEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.FollowerListResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, relation.FollowerListResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: data,
	})
}

// FriendList .
// @router /friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewRelationService(ctx, c).NewFriendListEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, relation.FriendListResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, relation.FriendListResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: data,
	})
}
