// Code generated by hertz generator.

package video

import (
	"context"

	"work/biz/model/base"
	video "work/biz/model/base/video"
	"work/biz/service"
	"work/pkg/errmsg"
	"work/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// VideoFeed .
// @router /video/feed/ [GET]
func VideoFeed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewVideoService(ctx, c).NewFeedEvent(&req)

	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoFeedResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoFeedResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: data,
	})
}

// VideoList .
// @router /video/list/ [GET]
func VideoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewVideoService(ctx, c).NewListEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoListResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoListResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: data,
	})
}

// VideoPopular .
// @router /video/popular/ [GET]
func VideoPopular(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoPopularRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewVideoService(ctx, c).NewPopularEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoPopularResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoPopularResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: data,
	})
}

// VideoSearch .
// @router /video/search/ [POST]
func VideoSearch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoSearchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewVideoService(ctx, c).NewSearchEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoSearchResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoSearchResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Data: data,
	})

}

// VideoPublishStart .
// @router /video/publish/start [POST]
func VideoPublishStart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoPublishStartRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uuid, err := service.NewVideoService(ctx, c).NewUploadEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoPublishStartResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoPublishStartResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Uuid: uuid,
	})
}

// VideoPublishUploading .
// @router /video/publish/uploading [POST]
func VideoPublishUploading(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoPublishUploadingRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewVideoService(ctx, c).NewUploadingEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoPublishUploadingResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoPublishUploadingResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
	})
}

// VideoPublishComplete .
// @router /video/publish/complete [POST]
func VideoPublishComplete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoPublishCompleteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewVideoService(ctx, c).NewUploadCompleteEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoPublishCompleteResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoPublishCompleteResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
	})
}

// VideoPublishCancle .
// @router /video/publish/cancle [POST]
func VideoPublishCancle(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoPublishCancleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = service.NewVideoService(ctx, c).NewCancleUploadEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoPublishCancleResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoPublishCancleResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
	})
}

// VideoVisit .
// @router /video/visit/:id [GET]
func VideoVisit(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.VideoVisitRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	data, err := service.NewVideoService(ctx, c).NewVisitEvent(&req)
	if err != nil {
		resp := utils.CreateBaseHttpResponse(err)
		c.JSON(consts.StatusOK, video.VideoVisitResponse{
			Base: &base.Status{
				Code: resp.StatusCode,
				Msg:  resp.StatusMsg,
			},
		})
		return
	}

	c.JSON(consts.StatusOK, video.VideoVisitResponse{
		Base: &base.Status{
			Code: errmsg.NoError.ErrorCode,
			Msg:  errmsg.NoError.ErrorMsg,
		},
		Item: data,
	})
}
